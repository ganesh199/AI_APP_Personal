import { html, css, LitElement } from '../../assets/lit-core-2.7.4.min.js';
import { resizeLayout } from '../../utils/windowResize.js';
import { LLMConfigManager } from '../../utils/llmConfig.js';

export class MainView extends LitElement {
    static styles = css`
        * {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            cursor: default;
            user-select: none;
        }
        .welcome {
            font-size: 24px;
            margin-bottom: 8px;
            font-weight: 600;
            margin-top: auto;
        }
        .description {
            color: var(--description-color);
            font-size: 14px;
            margin-bottom: 24px;
            line-height: 1.5;
        }
        .feature-list {
            margin-top: 20px;
        }
        .feature-item {
            display: flex;
            align-items: center;
            margin-bottom: 12px;
            font-size: 14px;
        }
        .feature-icon {
            margin-right: 10px;
            font-size: 16px;
        }
        :host {
            height: 100%;
            display: flex;
            flex-direction: column;
            width: 100%;
            max-width: 500px;
        }

        .action-buttons {
            margin-top: 24px;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .action-button {
            background: var(--focus-border-color, #007aff);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.15s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .action-button:hover {
            background: var(--text-input-button-hover, #0056b3);
        }

        .action-button.secondary {
            background: var(--button-background);
            color: var(--text-color);
            border: 1px solid var(--button-border);
        }

        .action-button.secondary:hover {
            background: var(--hover-background);
        }

        .llm-status {
            background: rgba(0, 122, 255, 0.1);
            border: 1px solid rgba(0, 122, 255, 0.2);
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 20px;
        }

        .llm-status-title {
            font-size: 16px;
            font-weight: 600;
            color: #007aff;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .llm-status-details {
            font-size: 14px;
            color: var(--description-color);
            line-height: 1.4;
        }

        .llm-provider {
            font-weight: 500;
            color: var(--text-color);
        }

        .no-llm-config {
            background: rgba(255, 193, 7, 0.1);
            border: 1px solid rgba(255, 193, 7, 0.2);
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 20px;
        }

        .no-llm-title {
            font-size: 16px;
            font-weight: 600;
            color: #ffc107;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
    `;

    static properties = {
        onLayoutModeChange: { type: Function },
        onLLMChatClick: { type: Function },
        onDirectChatClick: { type: Function },
<<<<<<< HEAD
=======
        onChatHistoryClick: { type: Function },
>>>>>>> 13371f78f6e9452abc4c741cf359b05e28942d0a
        llmConfig: { type: Object },
    };

    constructor() {
        super();
        this.onLayoutModeChange = () => {};
        this.onLLMChatClick = () => {};
        this.onDirectChatClick = () => {};
<<<<<<< HEAD
=======
        this.onChatHistoryClick = () => {};
>>>>>>> 13371f78f6e9452abc4c741cf359b05e28942d0a
        this.llmConfig = null;
        this.loadLayoutMode();
        this.loadLLMConfig();
        resizeLayout();
    }

    loadLLMConfig() {
        this.llmConfig = LLMConfigManager.getStoredConfig();
    }

    loadLayoutMode() {
        const savedLayoutMode = localStorage.getItem('layoutMode');
        if (savedLayoutMode && savedLayoutMode !== 'normal') {
            this.onLayoutModeChange(savedLayoutMode);
        }
    }

    render() {
        return html`
            <div class="welcome">Welcome TO Personal Assistant</div>
            <p class="description">
                This is a frontend-only application with stealth capabilities. 
            </p>
            
            ${this.llmConfig ? html`
                <div class="llm-status">
                    <div class="llm-status-title">
                        <span>ü§ñ</span>
                        AI Assistant Ready
                    </div>
                    <div class="llm-status-details">
                        Provider: <span class="llm-provider">${this.llmConfig.provider}</span><br>
                        Model: <span class="llm-provider">${this.llmConfig.model}</span><br>
                        Configured: ${new Date(this.llmConfig.configuredAt || this.llmConfig.updatedAt).toLocaleDateString()}
                    </div>
                </div>
            ` : html`
                <div class="no-llm-config">
                    <div class="no-llm-title">
                        <span>‚ö†Ô∏è</span>
                        AI Assistant Not Configured
                    </div>
                    <div class="llm-status-details">
                        Configure your AI provider to start chatting with your assistant.
                    </div>
                </div>
            `}
            
            <div class="feature-list">
                <div class="feature-item">
                    <span class="feature-icon">üîí</span>
                    <span>Content protection enabled</span>
                </div>
                <div class="feature-item">
                    <span class="feature-icon">üëÅÔ∏è</span>
                    <span>Stealth mode active</span>
                </div>
                <div class="feature-item">
                    <span class="feature-icon">‚å®Ô∏è</span>
                    <span>Customizable keyboard shortcuts</span>
                </div>
                <div class="feature-item">
                    <span class="feature-icon">üé®</span>
                    <span>Adjustable interface layout</span>
                </div>
            </div>
            
            <div class="action-buttons">
                ${this.llmConfig ? html`
                    <button class="action-button" @click=${this.onDirectChatClick}>
                        üí¨ Start New Chat with ${this.llmConfig.provider}
                    </button>
<<<<<<< HEAD
=======
                    <button class="action-button secondary" @click=${this.onChatHistoryClick}>
                        üìö View Chat History
                    </button>
>>>>>>> 13371f78f6e9452abc4c741cf359b05e28942d0a
                    <button class="action-button secondary" @click=${this.onLLMChatClick}>
                        üîß Change AI Provider
                    </button>
                ` : html`
                    <button class="action-button" @click=${this.onLLMChatClick}>
                        ü§ñ Configure AI Assistant
                    </button>
                `}
            </div>
        `;
    }
}

customElements.define('main-view', MainView);